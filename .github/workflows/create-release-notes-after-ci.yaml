# This is a basic workflow to help you get started with Actions

name: Create Release Notes after CI

# Controls when the workflow will run
on:
  push:
    branches: [ main ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      microservice:
        required: true
        type: string
        description: Name of Microservice
        default: apple

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Set version tag
        id: set-version
        run: |
          gh release list | grep "${{ env.MICROSERVICE }}/*"
          PREV_RELEASE_TAG=$(gh release list | grep -m1 "${{ env.MICROSERVICE }}/*" | cut -f3)
          MICROSERVICE=${{ inputs.microservice }}
          BUILD_VERSION=v$(date '+%Y%m%d%H%M')
          echo "microservice=${MICROSERVICE:=apple}" >> $GITHUB_OUTPUT
          echo "prev-release-tag=$(gh release list | grep -m1 "${{ env.MICROSERVICE }}/*" | cut -f3)" >> $GITHUB_OUTPUT
          echo "curr-release-tag=${MICROSERVICE:=apple}/$BUILD_VERSION" >> $GITHUB_OUTPUT
          echo "curr-release-title=${MICROSERVICE:=apple}: $BUILD_VERSION" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Write a release log
        uses: cuchi/jinja2-action@v1.2.0
        with:
          template: RELEASE-LOG.md
          output_file: RELEASE-LOG.md
        env:
          RELEASE_SUMMARY: |
            This contains a breaking change on apple.
          COMMIT_HISTORY: |
            - [APPLE-21] Initial commit for apple (#1) @elzino
            - [APPLE-123] New change on apple microservice (#2) @lucetre
            - [APPLE-939] Dummy PR (#3) @mayshin10
    
      - name: Get commit history
        run: |
          git log --pretty=format:"%h; %aN; %an; %aE; %ae; %aL; %al; %cN; %cn; %cE; %ce; %cL; %cl; %s" apple/v202310080644...apple/v202310080721
          git log --pretty=format:"%h; %aN; %an; %aE; %ae; %aL; %al; %cN; %cn; %cE; %ce; %cL; %cl; %s" ${{ env.PREV_RELEASE_TAG }}..${{ env.CURR_RELEASE_TAG }}
        env:
          PREV_RELEASE_TAG: ${{ steps.set-version.outputs.prev-release-tag }}
          CURR_RELEASE_TAG: ${{ steps.set-version.outputs.curr-release-tag }}

      - name: Create a tag on the input commit (gh-cli)
        run: |
          gh release create "${{ env.CURR_RELEASE_TAG }}" \
            --title "${{ env.CURR_RELEASE_TITLE }}" \
            --target ${{ env.COMMIT_SHA }} \
            --notes-start-tag "${{ env.PREV_RELEASE_TAG }}" \
            --generate-notes \
            --notes-file RELEASELOG.md
        env:
          GH_TOKEN: ${{ github.token }}
          MICROSERVICE: ${{ steps.set-version.outputs.microservice }}
          PREV_RELEASE_TAG: ${{ steps.set-version.outputs.prev-release-tag }}
          CURR_RELEASE_TAG: ${{ steps.set-version.outputs.curr-release-tag }}
          CURR_RELEASE_TITLE: ${{ steps.set-version.outputs.curr-release-title }}
          COMMIT_SHA: ${{ github.sha }}
